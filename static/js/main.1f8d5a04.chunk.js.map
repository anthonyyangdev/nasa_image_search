{"version":3,"sources":["Gallery.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Photo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","image","img_url","title","data","modal_image","_this2","fetch","href","then","response","json","j","setState","catch","error","getBetterPicture","prevProps","changed","modal","document","getElementById","modalImage","captionText","style","display","src","innerHTML","arr","caption","undefined","photographer","secondary_creator","center","location","date_created","description","processCaptionText","react_default","a","createElement","className","onClick","openModal","bind","alt","id","closeModal","Component","Table","_this3","page","row","col","i","items","collection","perPage","index","length","resource","links","url","Gallery_Photo","renderResult","Search","input","inputs","prev_json","next_json","current_page","true_page","end","param","words","split","newWords","filter","w","map","newParams","max","field","parameters","fields","value","toString","parseParam","trim","apiRoot","parsePrevAndNext","alert","closeSpecifics","searchServer","searchURL","height","event","copy","assign","objectSpread","q","target","media_type","newVal","this_year","Date","getFullYear","year_start","year_end","prev","next","updated_prev","Promise","resolve","next_value","prev_value","renderTransitionButtons","goPrev","goNext","count","greatest_index","neitherNav","onlyPrev","onlyNext","bothNav","onChange","updateQuery","pressedSearch","openSpecifics","src_Gallery","updateTitle","updatePhotographer","updateLocation","min","step","type","updateStart","updateEnd","App","quote","jsonReady","console","log","ReactDOM","render","src_Search_0","color","Boolean","window","hostname","match","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f8d5a04.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Gallery.css'\n\n/**\n * processCaptionText() produces a caption for an image/video/audio\n * based on the data that is provided to them in the JSON. Any specific\n * data fields that are not defined in the JSON are ignored.\n * \n * The following is the general list of the information:\n * _Title_\n * _Photographer_\n * _Secondary Creator_\n * _Center_\n * _Location_\n * _Date created_\n * _Description_\n * \n */\nfunction processCaptionText(arr) {\n  let data = arr[0]\n  let caption = data.title + \"\\n\\n\"\n\n  if (data.photographer !== undefined) {\n    caption += \"Photographer: \" + data.photographer + \"\\n\\n\"\n  }\n  if (data.secondary_creator !== undefined) {\n    caption += \"Secondary Creator: \" + data.secondary_creator + \"\\n\\n\"\n  }\n  if (data.center !== undefined) {\n    caption += \"Center: \" + data.center + \"\\n\\n\"\n  }\n  if (data.location !== undefined) {\n    caption += \"Location: \" + data.location + \"\\n\\n\"\n  }\n  if (data.date_created !== undefined) {\n    caption += \"Date Created: \" + data.date_created + \"\\n\\n\"\n  }\n  if (data.description !== undefined) {\n    caption += \"Description: \" + data.description + \"\\n\\n\"\n  }\n  return caption\n}\n\n\n/**\n * The Photo component prepares the search result appearance specfically\n * for an image. \n */\nclass Photo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: this.props.img_url,\n      title: this.props.title,\n      data: this.props.data,\n      modal_image: null,\n    };\n  }\n\n  getBetterPicture() {\n    fetch(this.props.href)\n      .then(response => response.json())\n      .then(j => {\n        this.setState({\n          modal_image: j[0]\n        })\n      })\n      .catch(error => {\n        this.setState({\n          modal_image: this.state.image\n        })\n      })\n  }\n\n  componentDidMount() {\n    this.getBetterPicture()\n  }\n\n  componentDidUpdate(prevProps) {\n    var changed = 0\n    if (prevProps.img_url !== this.props.img_url) {\n      this.setState({\n        image: this.props.img_url\n      })\n      changed++\n    }\n    if (prevProps.title !== this.props.title) {\n      this.setState({\n        title: this.props.title\n      })\n      changed++\n    }\n    if (prevProps.data !== this.props.data) {\n      this.setState({\n        data: this.props.data\n      })\n      changed++\n    }\n    if (prevProps.href !== this.props.href) {\n      this.setState({\n        href: this.props.href\n      })\n      changed++\n    }\n    // Only if changes occur does getBetterPicture()\n    // Prevents an infinte loop of rerendering.\n    if (changed > 0)\n      this.getBetterPicture()\n  }\n\n  /**\n   * Opens a modal that provides more information about the image.\n   */\n  openModal() {\n    var modal = document.getElementById('this_modal');\n    var modalImage = document.getElementById('modal_img');\n    var captionText = document.getElementById('caption');\n    modal.style.display = \"block\";\n    modalImage.src = this.state.modal_image;\n    captionText.innerHTML = processCaptionText(this.state.data);\n  }\n\n  closeModal() {\n    document.getElementById('this_modal').style.display = \"none\";\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"galleryDivider\" onClick={this.openModal.bind(this)}>\n          <img src={this.state.image} alt=\"Space\" className=\"photos\" />\n          <br />{this.state.title}\n        </div>\n        {/* A modal appears when the image is clicked */}\n        <div id=\"this_modal\" className=\"modal\">\n          {/* close button */}\n          <span className=\"close_modal\" onClick={this.closeModal.bind(this)}>\n            &times;</span>\n          {/* the image content in the modal */}\n          <img id=\"modal_img\" className=\"photo_modal_img\" />\n          {/* Description and text about the image */}\n          <div id=\"caption\"></div>\n        </div>\n      </div>);\n  }\n}\n\nclass Table extends Component {\n\n  /**\n   * renderResult(i) displays the ith result of the page, where i ranges from\n   * 1 to 25. \n   * If the ith result does not exist, i.e. if the index associated to\n   * the ith result is greater than the total number of items, then \n   * renderResult(i) returns a blank table cell.\n   *\n   * Requires: 1 <= i <= 25\n   */\n  renderResult(i) {\n    let items = this.state.json.collection.items\n    let perPage = this.state.col * this.state.row\n    let index = ((this.state.page - 1) % 4) * (perPage) + (i - 1);\n    if (index >= items.length) {\n      return (\n        <td></td>\n      );\n    }\n    let resource = items[index].links;\n    let data = items[index].data\n    let title = data[0].title\n\n    // The URL of the preview image\n    let url = resource[0].href;\n\n    // Any additional referenced links\n    let href = items[index].href\n    return (\n      <td>\n        <Photo img_url={url} title={title} data={data} href={href} />\n      </td>);\n  }\n\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: this.props.json,\n      page: this.props.page,\n      row: this.props.row,\n      col: this.props.col,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.json !== this.props.json) {\n      this.setState({\n        json: this.props.json\n      })\n    }\n    if (prevProps.page !== this.props.page) {\n      this.setState({\n        page: this.props.page\n      })\n    }\n    if (prevProps.row !== this.props.row) {\n      this.setState({\n        row: this.props.row\n      })\n    }\n    if (prevProps.col !== this.props.col) {\n      this.setState({\n        col: this.props.col\n      })\n    }\n  }\n\n  render() {\n    return (\n      <table id=\"gallery\">\n        <tbody>\n          <tr>\n            {this.renderResult(1)}\n            {this.renderResult(2)}\n            {this.renderResult(3)}\n            {this.renderResult(4)}\n            {this.renderResult(5)}\n          </tr>\n          <tr>\n            {this.renderResult(6)}\n            {this.renderResult(7)}\n            {this.renderResult(8)}\n            {this.renderResult(9)}\n            {this.renderResult(10)}\n          </tr>\n          <tr>\n            {this.renderResult(11)}\n            {this.renderResult(12)}\n            {this.renderResult(13)}\n            {this.renderResult(14)}\n            {this.renderResult(15)}\n          </tr>\n          <tr>\n            {this.renderResult(16)}\n            {this.renderResult(17)}\n            {this.renderResult(18)}\n            {this.renderResult(19)}\n            {this.renderResult(20)}\n          </tr>\n          <tr>\n            {this.renderResult(21)}\n            {this.renderResult(22)}\n            {this.renderResult(23)}\n            {this.renderResult(24)}\n            {this.renderResult(25)}\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Table","import React, { Component } from 'react';\nimport Table from './Gallery.js'\nimport './Search.css';\nconst apiRoot = \"https://images-api.nasa.gov\";\n\nclass Search extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      row: 5,\n      col: 5,\n      input: this.props.inputs,\n      prev_json: this.props.prev_json,\n      json: this.props.json,\n      next_json: this.props.next_json,\n      current_page: 1,\n      true_page: 1,\n      end: <div></div>\n    }\n  }\n\n  /**\n   * parseParam() parses parameters such that it can be appropriately used\n   * for a URL. For instance, parameters with whitespaces in the front or in\n   * the back of the string are trimmed. In addition, whitespaces that\n   * separate words in parameters are replaced by \"%20\".\n   */\n  parseParam(param) {\n    var words = param.split(\" \");\n    words = words.filter(w => w !== \"\");\n    let newWords = words.map(w => w + \"%20\");\n    var newParams = \"\";\n    let max = words.length;\n    var i;\n    for (i = 0; i < max - 1; i++) {\n      newParams += newWords[i];\n    }\n    if (max - 1 >= 0) {\n      newParams += words[max - 1];\n    }\n    return newParams;\n  }\n\n  /**\n   * searchURL() produces the URL used to connect to the server based on the\n   * search criteria that have been provided by the user. If none have been \n   * provided, searchURL() produces a URL such that year_start = 1 and \n   * year_end = the current year.\n   */\n  searchURL() {\n    var url = apiRoot + \"/search\";\n    var parameters = \"\";\n    var field;\n    let fields = this.state.input\n    for (field in fields) {\n      var value = fields[field].toString();\n      if (value === null || value === \"\") { continue; }\n      if (parameters === \"\") {\n        parameters += \"?\" + field + \"=\";\n      } else {\n        parameters += \"&\" + field + \"=\";\n      }\n      parameters += this.parseParam(value.trim());\n    }\n    return url + parameters;\n  }\n\n  /**\n   * Given the URL, searchServer() connects to the server to GET the JSON \n   * response based on that URL. The resolved JSON is added as a state field.\n   * The search page and the table in that page get re-rendered as a result.\n   */\n  searchServer(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(j => {\n        this.setState({\n          json: j,\n          prev_json: null,\n          next_json: null,\n          current_page: 1,\n          true_page: 1,\n        }, function () {\n          this.parsePrevAndNext()\n        })\n      })\n      .catch(() => {\n        alert(\"An error was encountered while attempting to connect to the server.\")\n      });\n  }\n\n  /**\n   * pressedSearch() returns the JSON response of the URL based on the search\n   * criteria in {@code this.state.input}. If the search bar is empty and no\n   * other specific search criteria are provided, then the default search URL \n   * is based on the year_start = 1 and year_end = the current year.\n   */\n  pressedSearch() {\n    this.closeSpecifics()\n    this.searchServer(this.searchURL())\n  }\n\n\n\n  openSpecifics() {\n    document.getElementById('specific_search').style.height = \"100%\"\n  }\n  closeSpecifics() {\n    document.getElementById(\"specific_search\").style.height = \"0%\"\n  }\n\n  // The following update[Param]() functions are called whenever the\n  // input field associated to the paramters are changed.\n  // This can occur in the regular search bar field, or in the specific\n  // search screen.\n  updateQuery(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        q: event.target.value\n      }\n    })\n  }\n  updateTitle(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        title: event.target.value\n      }\n    })\n  }\n  updateMedia(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        media_type: event.target.value\n      }\n    })\n  }\n  updatePhotographer(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        photographer: event.target.value\n      }\n    })\n  }\n  updateLocation(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        location: event.target.value\n      }\n    })\n  }\n  updateStart(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    let newVal = event.target.value\n    let this_year = new Date().getFullYear\n    if (newVal > this_year) {\n      newVal = this_year\n    }\n    this.setState({\n      input: {\n        ...copy,\n        year_start: newVal\n      }\n    })\n  }\n  updateEnd(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    let newVal = event.target.value\n    let this_year = new Date().getFullYear\n    if (newVal > this_year) {\n      newVal = this_year\n    }\n    this.setState({\n      input: {\n        ...copy,\n        year_end: newVal\n      }\n    })\n  }\n\n  /** \n    * parsePrevAndNext() processes the JSONs of the next page and the previous\n    * page, if any of them exist. If they do not exist, prev_json and next_json\n    * are null. \n    * Following the processing of the previous and next page JSONs, the \n    * navigation buttons are rendered.\n    */\n  async parsePrevAndNext() {\n    var prev = null;\n    var next = null;\n\n    let links = this.state.json.collection.links\n    if (links !== undefined) {\n      switch (links.length) {\n        case 0:\n          return\n        case 1:\n          if (this.state.true_page === 1) {\n            next = links[0].href\n          } else {\n            prev = links[0].href\n          }\n          break;\n        case 2:\n          prev = links[0].href\n          next = links[1].href\n          break;\n        default:\n          break;\n      }\n    }\n    if (prev !== null && next !== null) {\n      var updated_prev = Promise.resolve(fetch(prev)\n        .then(response => response.json())\n        .catch(() => {\n          alert(\"An error was encountered while attempting to connect to the server.\")\n        }))\n      var updated_next = Promise.resolve(fetch(next)\n        .then(response => response.json())\n        .catch(() => {\n          alert(\"An error was encountered while attempting to connect to the server.\")\n        })\n      )\n      updated_next.then(next_value => {\n        updated_prev.then(prev_value => {\n          this.setState({\n            prev_json: prev_value,\n            next_json: next_value\n          }, function () {\n            this.renderTransitionButtons()\n          })\n        })\n      })\n    }\n    else if (prev !== null) {\n      fetch(prev)\n        .then(response => response.json())\n        .then(prev => {\n          this.setState({\n            prev_json: prev\n          }, function () {\n            this.renderTransitionButtons()\n          })\n        })\n        .catch(() => {\n          alert(\"An error was encountered while attempting to connect to the server.\")\n        })\n    }\n    else if (next !== null) {\n      fetch(next)\n        .then(response => response.json())\n        .then(next => {\n          this.setState({\n            next_json: next\n          }, function () {\n            this.renderTransitionButtons()\n          })\n        })\n        .catch(() => {\n          alert(\"An error was encountered while attempting to connect to the server.\")\n        })\n    }\n    else {\n      this.setState({\n        next_json: null,\n        prev_json: null,\n      }, function () {\n        this.renderTransitionButtons()\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.parsePrevAndNext()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.inputs !== this.props.inputs) {\n      this.setState({\n        input: this.props.inputs\n      })\n    }\n    if (prevProps.prev_json !== this.props.prev_json) {\n      this.setState({\n        prev_json: this.props.prev_json\n      })\n    }\n    if (prevProps.json !== this.props.json) {\n      this.setState({\n        json: this.props.json\n      })\n    }\n    if (prevProps.next_json !== this.props.next_json) {\n      this.setState({\n        next_json: this.props.next_json\n      })\n    }\n  }\n\n  /**\n   * goNext() is the action when the Next button is clicked.\n   * This function is never called in a page unless the next button exists.\n   */\n  goNext() {\n    if (this.state.true_page * 4 === this.state.current_page) {\n      this.setState({\n        json: this.state.next_json,\n        prev_json: null,\n        next_json: null,\n        current_page: this.state.current_page + 1,\n        true_page: this.state.true_page + 1\n      }, function () {\n        this.parsePrevAndNext()\n      })\n    } else {\n      this.setState({\n        current_page: this.state.current_page + 1,\n      }, function () {\n        this.parsePrevAndNext()\n      })\n    }\n  }\n\n  /**\n   * goPrev() is the action when the Previous button is clicked.\n   * This function is never called in a page unless the previous button exists.\n   */\n  goPrev() {\n    if ((this.state.true_page * 4) - 3 === this.state.current_page) {\n      this.setState({\n        json: this.state.prev_json,\n        prev_json: null,\n        next_json: null,\n        current_page: this.state.current_page - 1,\n        true_page: this.state.true_page - 1,\n      }, function () {\n        this.parsePrevAndNext()\n      })\n    } else {\n      this.setState({\n        current_page: this.state.current_page - 1,\n      }, function () {\n        this.parsePrevAndNext()\n      })\n    }\n  }\n\n  // The following four functions help in making renderTransitionButtons() more\n  // succint. Each function describes a case of the navigation buttons.\n  bothNav() {\n    return (\n      <div id=\"search-end\">\n        <button id=\"prev\" onClick={this.goPrev.bind(this)}>Previous</button>\n        Page {this.state.current_page}\n        <button id=\"next\" onClick={this.goNext.bind(this)}>Next</button>\n      </div>);\n  }\n  onlyPrev() {\n    return (\n      <div id=\"search-end\">\n        <button id=\"prev\" onClick={this.goPrev.bind(this)}>Previous</button>\n        Page {this.state.current_page}\n      </div>);\n  }\n  onlyNext() {\n    return (\n      <div id=\"search-end\">\n        Page {this.state.current_page}\n        <button id=\"next\" onClick={this.goNext.bind(this)}>Next</button>\n      </div>);\n  }\n  neitherNav() {\n    return (\n      <div id=\"search-end\">\n        Page {this.state.current_page}\n      </div>);\n  }\n\n  renderTransitionButtons() {\n    // Case where we are viewing the first 25 items of a page.\n    if ((this.state.true_page * 4) - 3 === this.state.current_page) {\n      // Covers the edge case where there is only one page of items\n      if (this.state.prev_json === null && this.state.next_json === null) {\n        let count = this.state.json.collection.items.length\n        let greatest_index = (this.state.current_page % 4) * 25 - 1\n\n        // If greatest_index >= count, that means the current page\n        // has the last remaining items.\n        if (this.state.current_page === 1 && greatest_index >= count) {\n          // Covers case when page 1 is the only page and there are\n          // less than 25 elements.\n          this.setState({\n            end: this.neitherNav()\n          })\n        }\n        else if (greatest_index >= count) {\n          this.setState({\n            end: this.onlyPrev()\n          })\n        }\n        else if (this.state.current_page === 1) {\n          this.setState({\n            end: this.onlyNext()\n          })\n        }\n        else {\n          this.setState({\n            end: this.bothNav()\n          })\n        }\n      }\n      else if (this.state.prev_json === null) {\n        // next_nav must be true for this condition to be true.\n        this.setState({\n          end: this.onlyNext()\n        })\n      }\n      else if (this.state.next_json === null) {\n        let count = this.state.json.collection.items.length\n        let greatest_index = (this.state.current_page % 4) * 25 - 1\n        if (greatest_index >= count) {\n          this.setState({\n            end: this.onlyPrev()\n          })\n        } else {\n          this.setState({\n            end: this.bothNav()\n          })\n        }\n        // prev_nav must exist for this condition to be true.\n      } else {\n        this.setState({\n          end: this.bothNav()\n        })\n      }\n    }\n    // Case where we are viewing the last 25 items out of 75-100 items \n    // in a page\n    else if (this.state.true_page * 4 === this.state.current_page) {\n      if (this.state.prev_json === null && this.state.next_json === null) {\n        if (this.state.current_page === 4) {\n          this.setState({\n            end: this.onlyPrev()\n          })\n        } else {\n          this.setState({\n            end: this.neitherNav()\n          })\n        }\n      }\n      // next_nav must exist for this to be true\n      else if (this.state.prev_json === null) {\n        if (this.state.current_page === 4) {\n          this.setState({\n            end: this.bothNav()\n          })\n        }\n        else {\n          this.setState({\n            end: this.onlyNext()\n          })\n        }\n      }\n      // Case of the the last page of a search query\n      else if (this.state.next_json === null) {\n        this.setState({\n          end: this.onlyPrev()\n        })\n      } else {\n        this.setState({\n          end: this.bothNav()\n        })\n      }\n    }\n    // In remaining cases, we compare the the largest possible number of items     \n    // in the page, with the actual total amount of items from the JSON.\n    else {\n      let count = this.state.json.collection.items.length\n      let greatest_index = (this.state.current_page % 4) * 25 - 1\n      if (this.state.current_page === 1 && greatest_index >= count) {\n        this.setState({\n          end: this.neitherNav()\n        })\n      }\n      else if (greatest_index >= count) {\n        this.setState({\n          end: this.onlyPrev()\n        })\n      } else if (this.state.current_page === 1) {\n        this.setState({\n          end: this.onlyNext()\n        })\n      } else {\n        this.setState({\n          end: this.bothNav()\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <header className=\"Search-header\">\n          <section id=\"search\">\n            <a href=\"index.html\" id=\"search-name\"> NASA Image Archive </a>\n            <div>\n              <input value={this.state.input.q}\n                onChange={this.updateQuery.bind(this)}\n                id=\"search-bar\"></input>\n              <button className=\"search-submit\"\n                onClick={this.pressedSearch.bind(this)}>Search</button>\n              <button className=\"search-submit\"\n                onClick={this.openSpecifics.bind(this)}>Specify My Search</button>\n            </div>\n            <div>\n              <Table json={this.state.json}\n                page={this.state.current_page}\n                row={this.state.row}\n                col={this.state.col}\n              />\n            </div>\n            {this.state.end}\n            <div id=\"specific_search\" className=\"overlay\">\n              <a href=\"javascript:void(0)\" className=\"closebutton\"\n                onClick={this.closeSpecifics.bind(this)}>\n                &times;</a>\n              <div className=\"overlay-content\">\n                <a href=\"#\">Regular Search Terms</a>\n                <input value={this.state.input.q}\n                  onChange={this.updateQuery.bind(this)}\n                  className=\"specify\"></input>\n                <a href=\"# \" id=\"t\">Title</a>\n                <input value={this.state.input.title}\n                  onChange={this.updateTitle.bind(this)}\n                  className=\"specify\"></input>\n                <a href=\"#\" id=\"d\">Photographer</a>\n                <input value={this.state.input.photographer}\n                  onChange={this.updatePhotographer.bind(this)}\n                  className=\"specify\"></input>\n                <a href=\"#\" id=\"l\">Location</a>\n                <input value={this.state.input.location}\n                  onChange={this.updateLocation.bind(this)}\n                  className=\"specify\"></input>\n                <div className=\"year-slider\">\n                  <a href=\"#\" id=\"date\">Start Year: {this.state.input.year_start}</a>\n                  <input value={this.state.input.year_start}\n                    min=\"1\" max={new Date().getFullYear()}\n                    step=\"2\" type=\"range\"\n                    onChange={this.updateStart.bind(this)} />\n                  <a href=\"#\" id=\"date\">Year End: {this.state.input.year_end}</a>\n                  <input value={this.state.input.year_end}\n                    min=\"1\" max={new Date().getFullYear()}\n                    step=\"2\" type=\"range\"\n                    onChange={this.updateEnd.bind(this)} />\n                  <br />\n                  <button onClick={this.pressedSearch.bind(this)}\n                    id=\"specify-button\">Search</button>\n                </div>\n              </div>\n            </div>\n          </section>\n        </header>\n      </div >\n    );\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom'\nimport './App.css';\nimport Search from './Search.js'\n\nconst apiRoot = \"https://images-api.nasa.gov\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // The fields of input are the search criteria a user may wish to modify.\n    this.state = {\n      quote: this.props.quote,\n      input: {\n        q: \"\",\n        media_type: \"image\",\n        location: \"\", // String\n        photographer: \"\", // String\n        title: \"\", // String\n        year_start: \"1\", // Number\n        year_end: new Date().getFullYear(), // Number\n      },\n      jsonReady: false,\n      json: null\n    }\n  }\n\n  /**\n   * parseParam() parses parameters such that it can be appropriately used\n   * for a URL. For instance, parameters with whitespaces in the front or in\n   * the back of the string are trimmed. In addition, whitespaces that\n   * separate words in parameters are replaced by \"%20\".\n   */\n  parseParam(param) {\n    var words = param.split(\" \");\n    words = words.filter(w => w !== \"\");\n    let newWords = words.map(w => w + \"%20\");\n    var newParams = \"\";\n    let max = words.length;\n    var i;\n    for (i = 0; i < max - 1; i++) {\n      newParams += newWords[i];\n    }\n    if (max - 1 >= 0) {\n      newParams += words[max - 1];\n    }\n    return newParams;\n  }\n\n  /**\n   * searchURL() produces the URL used to connect to the server based on the\n   * search criteria that have been provided by the user. If none have been \n   * provided, searchURL() produces a URL such that year_start = 1 and \n   * year_end = the current year.\n   */\n  searchURL() {\n    var url = apiRoot + \"/search\";\n    var parameters = \"\";\n    var field;\n    let fields = this.state.input\n    for (field in fields) {\n      var value = fields[field].toString();\n      if (value === null || value === \"\") { continue; }\n      if (parameters === \"\") {\n        parameters += \"?\" + field + \"=\";\n      } else {\n        parameters += \"&\" + field + \"=\";\n      }\n      parameters += this.parseParam(value.trim());\n    }\n    console.log(url + parameters)\n    return url + parameters;\n  }\n\n  /**\n   * Given the URL, searchServer() connects to the server to GET the JSON \n   * response based on that URL. The resolved JSON is added as a state field.\n   * The search page and the table in that page get re-rendered as a result.\n   */\n  searchServer(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(j => {\n        this.setState({\n          jsonReady: true,\n          json: j,\n        })\n      })\n      .then(() => {\n        ReactDOM.render(\n          <Search\n            inputs={this.state.input}\n            json={this.state.json}\n            prev_json={null}\n            next_json={null}\n          />\n          , document.getElementById('root'))\n        // window.open(\"search.html\")\n      })\n      .catch(error => {\n        alert(\"An error was encountered while attempting to connect to the server.\")\n      })\n  }\n\n  /**\n   * pressedSearch() returns the JSON response of the URL based on the search\n   * criteria in {@code this.state.input}. If the search bar is empty and no\n   * other specific search criteria are provided, then the default search URL \n   * is based on the year_start = 1 and year_end = the current year.\n   */\n  pressedSearch() {\n    this.searchServer(this.searchURL())\n  }\n\n\n  openSpecifics() {\n    document.getElementById('specific_search').style.height = \"100%\"\n  }\n  closeSpecifics() {\n    document.getElementById(\"specific_search\").style.height = \"0%\"\n  }\n\n  // The following update[Param]() functions are called whenever the\n  // input field associated to the paramters are changed.\n  // This can occur in the regular search bar field, or in the specific\n  // search screen.\n  updateQuery(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        q: event.target.value\n      }\n    })\n  }\n  updateTitle(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        title: event.target.value\n      }\n    })\n  }\n  updateMedia(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        media_type: event.target.value\n      }\n    })\n  }\n  updatePhotographer(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        photographer: event.target.value\n      }\n    })\n  }\n  updateLocation(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    this.setState({\n      input: {\n        ...copy,\n        location: event.target.value\n      }\n    })\n  }\n  updateStart(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    var newVal = event.target.value\n    let this_year = new Date().getFullYear\n    if (newVal > this_year) {\n      newVal = this_year\n    }\n    this.setState({\n      input: {\n        ...copy,\n        year_start: newVal\n      }\n    })\n  }\n  updateEnd(event) {\n    let copy = Object.assign({}, this.state.input); //creating copy of object\n    var newVal = event.target.value\n    let this_year = new Date().getFullYear\n    if (newVal > this_year) {\n      newVal = this_year\n    }\n    this.setState({\n      input: {\n        ...copy,\n        year_end: newVal\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <section id=\"main-page\">\n            <a href=\"index.html\" id=\"name\"> NASA Image Archive </a>\n            <h3 style={{ color: \"#0070ff\" }}> {this.state.quote} </h3>\n            <div>\n              <input value={this.state.input.q}\n                onChange={this.updateQuery.bind(this)}\n                id=\"app-search-bar\"></input> <br />\n              <button className=\"main-submit\"\n                onClick={this.pressedSearch.bind(this)}>Search</button>\n              <button className=\"main-submit\"\n                onClick={this.openSpecifics.bind(this)}>Specify My Search\n              </button>\n\n              {/* Specific Search Screen. This is hidden by the default\n              by setting the height = \"0\". */}\n              <div id=\"specific_search\" className=\"overlay\">\n                <a href=\"javascript:void(0)\" className=\"closebutton\"\n                  onClick={this.closeSpecifics.bind(this)}>\n                  &times;</a>\n                <div className=\"overlay-content\">\n                  {/* Query */}\n                  <a href=\"#\">Regular Search Terms</a>\n                  <input value={this.state.input.q}\n                    onChange={this.updateQuery.bind(this)}\n                    className=\"specify\" />\n                  {/* Search by Title */}\n                  <a href=\"# \" id=\"t\">Title</a>\n                  <input value={this.state.input.title}\n                    onChange={this.updateTitle.bind(this)}\n                    className=\"specify\" />\n                  {/* Search by Photographer */}\n                  <a href=\"#\" id=\"d\">Photographer</a>\n                  <input value={this.state.input.photographer}\n                    onChange={this.updatePhotographer.bind(this)}\n                    className=\"specify\" />\n                  {/* Search by Location */}\n                  <a href=\"#\" id=\"l\">Location</a>\n                  <input value={this.state.input.location}\n                    onChange={this.updateLocation.bind(this)}\n                    className=\"specify\" />\n                  <div className=\"year-slider\">\n                    {/* Search by Date Range */}\n                    <a href=\"#\" id=\"date\">\n                      Start Year: {this.state.input.year_start}\n                    </a>\n                    <input value={this.state.input.year_start}\n                      min=\"1\" max={new Date().getFullYear()}\n                      step=\"2\" type=\"range\"\n                      onChange={this.updateStart.bind(this)} />\n                    <a href=\"#\" id=\"date\">\n                      Year End: {this.state.input.year_end}\n                    </a>\n                    <input value={this.state.input.year_end}\n                      min=\"1\" max={new Date().getFullYear()}\n                      step=\"2\" type=\"range\"\n                      onChange={this.updateEnd.bind(this)} />\n                    <br />\n                    <button onClick={this.pressedSearch.bind(this)}\n                      id=\"specify-button\">\n                      Search\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App quote=\"Explore the Advancements to the Final Frontier\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}